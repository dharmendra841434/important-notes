import React, {useState} from 'react';
import {
  View,
  Text,
  StyleSheet,
  Animated,
  TouchableHighlight,
  TouchableOpacity,
} from 'react-native';
import {SwipeListView} from 'react-native-swipe-list-view';
import Icon from 'react-native-vector-icons/FontAwesome5';
import Ionicon from 'react-native-vector-icons/Ionicons';
import {useDispatch} from 'react-redux';
import {cancelBidRequest} from '../../app/slices/gameSlice';
import {rates} from '../../usefulData/gameRates';
import {AppColors} from '../../utils/appColors';

const BidHistory = ({darkState, data}) => {
  const dispatch = useDispatch();
  const [listData, setListData] = useState(
    data &&
      data.length > 0 &&
      data.map((rates, index) => ({
        key: rates._id,
        title: rates.gameName,
        coins: rates.amount,
      })),
  );

  const closeRow = (rowMap, rowKey) => {
    if (rowMap[rowKey]) {
      rowMap[rowKey].closeRow();
    }
  };

  const deleteRow = (rowMap, rowKey) => {
    alert(rowKey);
    dispatch(cancelBidRequest(rowKey));
    closeRow(rowMap, rowKey);
    const newData = [...listData];
    const prevIndex = listData.findIndex(item => item.key === rowKey);
    newData.splice(prevIndex, 1);
    setListData(newData);
  };

  const onRowDidOpen = rowKey => {
    //console.log('This row opened', rowKey);
  };

  const onLeftActionStatusChange = rowKey => {
    //console.log('onLeftActionStatusChange', rowKey);
  };

  const onRightActionStatusChange = rowKey => {
    // console.log('onRightActionStatusChange', rowKey);
  };

  const onRightAction = rowKey => {
    // console.log('onRightAction', rowKey);
  };

  const onLeftAction = rowKey => {
    // console.log('onLeftAction', rowKey);
  };

  const VisibleItem = props => {
    const {
      data,
      rowHeightAnimatedValue,
      removeRow,
      leftActionState,
      rightActionState,
    } = props;

    if (rightActionState) {
      Animated.timing(rowHeightAnimatedValue, {
        toValue: 0,
        duration: 200,
        useNativeDriver: false,
      }).start(() => {
        removeRow();
      });
    }

    return (
      <Animated.View
        style={[
          styles.rowFront,
          {
            height: rowHeightAnimatedValue,
            backgroundColor:
              darkState == 'dark' ? AppColors.darkGray : AppColors.notification,
          },
        ]}>
        <TouchableHighlight
          style={[
            styles.rowFrontVisible,
            {
              backgroundColor:
                darkState == 'dark'
                  ? AppColors.darkGray
                  : AppColors.notification,
            },
          ]}
          onPress={() => console.log('Element touched')}
          underlayColor={'#aaa'}>
          <View
            style={{
              flexDirection: 'row',
              height: '100%',
              justifyContent: 'space-between',
              alignItems: 'center',
              width: '100%',
              paddingHorizontal: '5%',
            }}>
            <Text
              style={[
                styles.title,
                {
                  color:
                    darkState == 'dark'
                      ? AppColors.darkTextColor
                      : AppColors.secoundry,
                },
              ]}
              numberOfLines={1}>
              {data.item.title}
            </Text>
            <View style={{flexDirection: 'row', alignItems: 'center'}}>
              <Text
                style={[
                  styles.details,
                  {
                    color:
                      darkState == 'dark'
                        ? AppColors.darkTextColor
                        : AppColors.secoundry,
                  },
                ]}
                numberOfLines={1}>
                {data.item.coins}
              </Text>
              <Icon
                name="database"
                size={30}
                color={AppColors.coinColor}
                style={{marginStart: '5%'}}
              />
            </View>
          </View>
        </TouchableHighlight>
      </Animated.View>
    );
  };

  const renderItem = (data, rowMap) => {
    const rowHeightAnimatedValue = new Animated.Value(60);

    return (
      <VisibleItem
        data={data}
        rowHeightAnimatedValue={rowHeightAnimatedValue}
        removeRow={() => deleteRow(rowMap, data.item.key)}
      />
    );
  };

  const HiddenItemWithActions = props => {
    const {
      swipeAnimatedValue,
      leftActionActivated,
      rightActionActivated,
      rowActionAnimatedValue,
      rowHeightAnimatedValue,
      onClose,
      onDelete,
    } = props;

    if (rightActionActivated) {
      Animated.spring(rowActionAnimatedValue, {
        toValue: 500,
        useNativeDriver: false,
      }).start();
    } else {
      Animated.spring(rowActionAnimatedValue, {
        toValue: 75,
        useNativeDriver: false,
      }).start();
    }

    return (
      <Animated.View
        style={[
          styles.rowBack,
          {
            height: rowHeightAnimatedValue,
            backgroundColor:
              darkState == 'dark' ? AppColors.darkbg : AppColors.primary,
          },
        ]}>
        <Text>Left</Text>
        {!leftActionActivated && (
          <TouchableOpacity
            style={[styles.backRightBtn, styles.backRightBtnLeft]}
            onPress={onClose}>
            <Ionicon
              name="close-circle-outline"
              size={30}
              color={AppColors.primary}
            />
          </TouchableOpacity>
        )}
        {!leftActionActivated && (
          <Animated.View
            style={[
              styles.backRightBtn,
              styles.backRightBtnRight,
              {
                flex: 1,
                width: rowActionAnimatedValue,
              },
            ]}>
            <TouchableOpacity
              style={[styles.backRightBtn, styles.backRightBtnRight]}
              onPress={onDelete}>
              <Animated.View
                style={[
                  styles.trash,
                  {
                    transform: [
                      {
                        scale: swipeAnimatedValue.interpolate({
                          inputRange: [-90, -45],
                          outputRange: [1, 0],
                          extrapolate: 'clamp',
                        }),
                      },
                    ],
                  },
                ]}>
                <Ionicon
                  name="trash-outline"
                  color={AppColors.primary}
                  size={25}
                />
              </Animated.View>
            </TouchableOpacity>
          </Animated.View>
        )}
      </Animated.View>
    );
  };

  const renderHiddenItem = (data, rowMap) => {
    const rowActionAnimatedValue = new Animated.Value(75);
    const rowHeightAnimatedValue = new Animated.Value(60);

    return (
      <HiddenItemWithActions
        data={data}
        rowMap={rowMap}
        rowActionAnimatedValue={rowActionAnimatedValue}
        rowHeightAnimatedValue={rowHeightAnimatedValue}
        onClose={() => closeRow(rowMap, data.item.key)}
        onDelete={() => deleteRow(rowMap, data.item.key)}
      />
    );
  };

  return (
    <View
      style={{
        flex: 1,
        backgroundColor:
          darkState == 'dark' ? AppColors.darkbg : AppColors.primary,
      }}>
      <SwipeListView
        data={listData}
        renderItem={renderItem}
        renderHiddenItem={renderHiddenItem}
        leftOpenValue={75}
        rightOpenValue={-150}
        disableRightSwipe
        onRowDidOpen={onRowDidOpen}
        leftActivationValue={100}
        rightActivationValue={-200}
        leftActionValue={0}
        rightActionValue={-500}
        onLeftAction={onLeftAction}
        onRightAction={onRightAction}
        onLeftActionStatusChange={onLeftActionStatusChange}
        onRightActionStatusChange={onRightActionStatusChange}
      />
    </View>
  );
};

export {BidHistory};

const styles = StyleSheet.create({
  backTextWhite: {
    color: AppColors.primary,
  },
  rowFront: {
    borderRadius: 5,
    height: 60,
    margin: 5,
    marginBottom: 15,
    shadowColor: '#999',
    shadowOffset: {width: 0, height: 1},
    shadowOpacity: 0.8,
    shadowRadius: 2,
    elevation: 5,
  },
  rowFrontVisible: {
    backgroundColor: AppColors.notification,
    flexDirection: 'row',
    borderRadius: 5,
    height: '100%',
    padding: 10,
    marginBottom: 15,
  },
  rowBack: {
    alignItems: 'center',
    backgroundColor: '#DDD',
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingLeft: 15,
    margin: 5,
    marginBottom: 15,
    borderRadius: 5,
  },
  backRightBtn: {
    alignItems: 'flex-end',
    bottom: 0,
    justifyContent: 'center',
    position: 'absolute',
    top: 0,
    width: 75,
    paddingRight: 17,
  },
  backRightBtnLeft: {
    backgroundColor: AppColors.secoundry,
    right: 75,
  },
  backRightBtnRight: {
    backgroundColor: AppColors.errorColor,
    right: 0,
    borderTopRightRadius: 5,
    borderBottomRightRadius: 5,
  },
  trash: {
    height: 25,
    width: 25,
    marginRight: 7,
  },
  title: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 5,
    color: AppColors.secoundry,
  },
  details: {
    fontSize: 12,
    color: AppColors.secoundry,
    fontWeight: '500',
    paddingHorizontal: '5%',
  },
});
